// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from recognizer.djinni

#import "BNBFaceSearchMode.h"
#import "BNBFeatureId.h"
#import "BNBFrameData.h"
#import "BNBRecognizerMode.h"
#import <Foundation/Foundation.h>
@class BNBRecognizer;
@protocol BNBFeature;


__attribute__((__visibility__("default"))) @interface BNBRecognizer : NSObject

/**
 * @param maxTokens If greater than 0: recognizer will run processing on push-ed() frame only if it can "consume" a token -
 *                   and will wait for the token to become available if all maxTokens tokens have been used up.
 *                   Consumed tokens are "produced" again one-by-one when pop-ping() processed frame(s).
 *                   This mode prevents processing frames more often than a consumer(e.g. renderer) can use:
 *                   potentially reducing energy consumption at the cost of higher latency.
 *                   Only for asynchronous mode.
 */
+ (nullable BNBRecognizer *)create:(BNBRecognizerMode)mode
                         maxTokens:(nullable NSNumber *)maxTokens;

+ (int64_t)getFeatureId:(BNBFeatureId)feature;

- (nullable id<BNBFeature>)getFeature:(BNBFeatureId)feature;

- (void)setFeatures:(nonnull NSSet<NSNumber *> *)features;

- (void)addFeature:(nullable id<BNBFeature>)feature
      dependencies:(nonnull NSSet<NSNumber *> *)dependencies
          needsGpu:(BOOL)needsGpu;

- (void)removeFeature:(nullable id<BNBFeature>)feature;

/** sets maximum allowed face results, if face tracking feature is present */
- (void)setMaxFaces:(int32_t)num;

- (void)setOfflineMode:(BOOL)on;

/**
 * Set future frame filtrarion mode.
 * Produce smoother recognition result (anti jitter), however adds inconsistency in push'ed/pop'ed frames (one frame lag)
 * Applied only in push_camera_frame/pop_frame_data methods, when offline mode is disabled.
 * Example: push frame 1 - pop frame 1, push frame 2 - pop frame 1, push frame 3 - pop frame 2, ...
 */
- (void)setUseFutureFilter:(BOOL)on;

/**
 * Set flag which enable NN's features. True by default, if device compatible with NN player
 * When this flag is false, recognizer will skip NN-dependent features during set_features call.
 * In case when device have no NN player support (is_device_nn_compatible return false),
 * setting enable to true have no any effect
 */
- (void)setNnEnable:(BOOL)enable;

- (BOOL)getNnEnable;

/** Check if device compatible with NN player. */
- (BOOL)isDeviceNnCompatible;

/** Clear pipeline state and set face search mode */
- (void)setFaceSearchMode:(BNBFaceSearchMode)mode;

- (void)process:(nullable BNBFrameData *)frameData;

- (BOOL)processFromBuffer;

- (void)pushCameraFrame:(nullable BNBFrameData *)inputFrameData;

- (BOOL)popFrameData:(nullable BNBFrameData *)outputFrameData;

/** start the recognizer */
- (void)start;

/** pause the recognizer */
- (void)pause;

/** pause + clear */
- (void)stop;

/** clear input and output buffers and pipeline state, also clean cached features */
- (void)clear;

@end
