// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#import "BNBAnimationMode.h"
#import <Foundation/Foundation.h>
@class BNBComponent;
@class BNBMaterial;
@class BNBMesh;
@class BNBMeshInstance;
@class BNBPhysicsSimulator;


/**class which is the container for meshes and materials and provide interface for animation controlling. Subclass of component */

#ifndef DJINNI_EXPORT
    #define DJINNI_EXPORT __attribute__((__visibility__("default")))
#endif

DJINNI_EXPORT
@interface BNBMeshInstance : NSObject

/**
 *Fabric method for mesh_instance creating.
 *@return mesh_instance component (mesh_instance)
 */
+ (nullable BNBMeshInstance *)create;

/**
 *set mesh visibility flag. Will be overridden if entity with mesh_instance component is child of entity with face_tracker component.
 *@param visible(bool) visibility flag.
 */
- (void)setVisible:(BOOL)visible;

/**@return visibility flag (bool) */
- (BOOL)isVisible;

/**
 *set for mesh sub geometry with specified name specified material if sub geometry with given name exists.
 *@param subGeometryName (string) sub geometry name.
 *@param material (material) sub geometry material.
 */
- (void)setSubGeometryMaterial:(nonnull NSString *)subGeometryName
                      material:(nullable BNBMaterial *)material;

/**
 *returns material from mesh sub geometry with specified name if it exist, null otherwise
 *@param subGeometryName (string) sub geometry name.
 *@return sub geometry material (material).
 */
- (nullable BNBMaterial *)getSubGeometryMaterial:(nonnull NSString *)subGeometryName;

/**
 *get materials for each sub geometry
 *@return materials (list<material>)
 */
- (nonnull NSArray<BNBMaterial *> *)getMaterials;

/**
 *set mesh for given mesh instance. Of some mesh was settled before need to re set all materials.
 *@param mesh (mesh) new mesh.
 */
- (void)setMesh:(nullable BNBMesh *)mesh;

/**@return mesh (mesh). */
- (nullable BNBMesh *)getMesh;

/**
 *Change current animation if animation with specified name exist.
 *@param name (string) new animation.
 *@param mode (animation_mode).
 */
- (void)animationChange:(nonnull NSString *)animation
                   mode:(BNBAnimationMode)mode;

/**Start animation playback. */
- (void)animationPlay;

/**pause animation playback. */
- (void)animationPause;

/**
 *Set current animation playback position.
 *@param positionNs (long): position in ns.
 */
- (void)animationSeek:(int64_t)positionNs;

/**
 *True if animation playback was started.
 *@return animation playback active flag (bool).
 */
- (BOOL)isAnimationPlaying;

/**
 *True if animation playback stop.
 *@return animation playback active flag (bool).
 */
- (BOOL)isAnimationEnded;

/**@return current setted animation name (string). */
- (nonnull NSString *)getAnimation;

/**@return current setted animation mode (animation_mode). Can be off loop once once_reversed fixed. */
- (BNBAnimationMode)getAnimationMode;

/**@return current animation playback position (long). */
- (int64_t)getAnimationPositionNs;

/**@return current animation playback duration (long). */
- (int64_t)getAnimationDurationNs;

/**
 *Returns current animation playback time offset from begin(0). Typycally equals animation position mod animation duration.
 *@return animation playback time offset (long).
 */
- (int64_t)getAnimationTimeOffsetNs;

/**
 *Set current animation playback time offset from begin(0). duration.
 *@param timeNs (long): animation playback time offset.
 */
- (void)setAnimationTimeOffsetNs:(int64_t)timeNs;

/**@return physics_simulator of current mesh_instance  */
- (nullable BNBPhysicsSimulator *)getPhysicsSimulator;

/**@return upcast to base type */
- (nullable BNBComponent *)asComponent;

@end
